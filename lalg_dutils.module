<?php

//************************************************************
// Creates VBO Action to delete all personal data
//************************************************************
/**
 * Implements hook_action_info()
 * Creates a VBO Action to delete a Contact and all personal data.
 */
function lalg_dutils_action_info() {
//	dpm('Hook Action Info called');
  return array(
      'lalg_dutils_delete_personal_data' => array(
      'type' => 'entity',
      'label' => t('Delete Contacts and all personal data'),
      'behavior' => array(''),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('civicrm_contact'),
    ),
  );
}

/**
 * Carries out the VBO Action to delete all personal data.
 */
function lalg_dutils_delete_personal_data (&$entity, $context) {
	// dpm('VBO Action');
	// dpm($entity);
	// dpm($context);	
	
	// Get the Contact Id.
	if ($context['entity_type'] != 'civicrm_contact' ) return;
	$cid = $entity -> contact_id;
// dpm('Contact_id ' . $cid);

	//Get the Drupal User ID
	$result = civicrm_api3('User', 'get', [
	  'contact_id' => $cid,
	]);
	$uid = $result['id'];
// dpm('Drupal User Id ' . $uid);

	// Delete related Activities
	$result = civicrm_api3('Activity', 'get', [
	  'sequential' => 1,
	  'contact_id' => $cid,
	  'options' => array(
		'limit' => 1000,
		'sort' => "id DESC"
	  ),
	]);
	foreach ($result['values'] as $activity) {
		$r = civicrm_api3('Activity', 'delete', [
		  'id' => $activity['id'],
		  'skip_undelete' => 1,
		]);
	}
	
	// Delete related Contributions
	$result = civicrm_api3('Contribution', 'get', [
	  'sequential' => 1,
	  'contact_id' => $cid,
	]);
	foreach ($result['values'] as $contrib) {
		$r = civicrm_api3('Contribution', 'delete', [
		  'id' => $contrib['id'],
		  'skip_undelete' => 1,
		]);
	}
	
	// Delete the Contact record
	// Flows down to associated Membership, membership of Groups.
	$result = civicrm_api3('Contact', 'delete', [
	  'id' => $cid,
	  'skip_undelete' => 1,
	]);
	
	// Delete associated Drupal User, Reassign content to Anonymous
	if ($uid && $uid > 0) {
		user_cancel(
		  array(
			'user_cancel_notify' => FALSE,
			'user_cancel_method' => 'user_cancel_reassign',
		  ),
		  $uid,
		  'user_cancel_reassign'
		);
	}
}

//********************************************************************
// Custom Webform Validation Rules
//********************************************************************

/**
 * Implements hook_webform_validation_validators().
 */
function lalg_dutils_webform_validation_validators() {
  return array(
    'all_or_none' => array(
      'name' => "LALG All or None",
      'description' => "Checks all or none of the specified fields have content.",
      'component_types' => array(
        'textfield', 'email',
      ),
    ),
	'lalg_email_dependencies' => array(
      'name' => "LALG Email Dependencies",
      'description' => "Checks dependencies on Email field. Select Membership Type, Last Name and Email",
      'component_types' => array(
        'textfield', 'email', 'select',
      ),	 
	)
  );
}

/**
 * Implements hook_webform_validation_validate().
 */
function lalg_dutils_webform_validation_validate($validator_name, $items, $components, $rule) {
  if ($items) {
    switch ($validator_name) {
		
// ****************  All or None Validator  ***********************		
      case 'all_or_none':
// dpm($items);	  
        $errors = array();
        foreach ($items as $key => $val) {
			$items[$key] = (bool) strlen($items[$key]);
        }
		$number_completed = count(array_filter($items));
		if ($number_completed > 0 && $number_completed < count($items) ) {
			// Generate Error Message(s)
			if (count($items) == 2) {
				$err_message = 'You must complete both or neither of the First/Last Name';
			}
			else {
				$err_message = 'You must complete all or none of the First/Last Name and Email Address';
			}
			reset($items);
			$errors[key($items)] = $err_message;
		}
        return $errors;
        break;
		
// *********************  Email Dependencies Validator  **************************
/* Implements a custom validation rule.
 * Requires the following fields selected:  Email, Last Name of same Contact, Send Membership Documents, ditto,
 *   and Membership Type Required.
 * Error if Email and no Last Name, or Plain Membership and no Email.
 */
	  case 'lalg_email_dependencies':
	  
// dpm($items);
// dpm($components);		
        $errors = array();
		foreach ($items as $key => $val) {
			// Identify the fields of interest
			$formKey = $components[$key]['form_key'];
			if (endsWith($formKey, 'email')) {$email = $key;} 
			if (endsWith($formKey, 'name')) {$name = $key;}
			if (endsWith($formKey, 'membership_type_id')) {$membId = $key;}
		}	

 // dpm('Email: ' . $email . 'Value: ' . $items[$email]);
  
		if ($items[$email] && !$items[$name]) {
			// Email set but no Name
			$errors[$name] = 'Name is mandatory if Email field is set';
		}
		if (!$items[$email] && $items[$name])  {
			// Email field empty - check other dependencies	
			if ($items[$membId] == '7') {
				$errors[$email] = 'Membership without a Printed Newsletter requires an Email address';
			}			
		}

		// Return any errors		
        return $errors; 
		break;
    }
  }
}

function endsWith($haystack, $needle)
{
    $length = strlen($needle);
    if ($length == 0) {
        return true;
    }
    return (substr($haystack, -$length) === $needle);
}

//********************************************************************
// Changes to Webforms - in addition to the standard configuration stuff
//********************************************************************
/**
 * Implements hook_form_alter().
 */
function lalg_dutils_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
//dpm($form_id);
	// Exit unless Page is UserDetails or AdminDetails
	$uri = $_SERVER['REQUEST_URI'];
	// Check 'Starts With'
	if ((strpos($uri, '/userdetails') !== 0) && (strpos($uri, '/admindetails') !== 0)){
		return;
	}

//************  Attach Javascript to Webforms for behaviour tweaks. ************
	$path = drupal_get_path('module', 'lalg_dutils') . '/lalg_webform.js';
	//dpm($path);
    $form['#attached']['js'][] = $path;
  
//************  Add Membership Price Information  *****************
  if ($form['progressbar']['#page_num'] == '1') {	
// dpm($form);
	// Find the Price Details
	$prices = lalg_get_price_data();
	// Add to form
	if (isset($form['submitted']['membership_details']['#description'])) {
	  $form['submitted']['membership_details']['#description'] .= $prices;
	}
  }
  
//********************* Copy Postcode if HH not set yet *************************
// Usability, if User has registered with Postcode it then shows on Webform.
  if ($form['progressbar']['#page_num'] == '1' && $form_id == 'webform_client_form_8017')  {	
//  dpm($form);
//  dpm($form_id);
	// Get current Contact Id
	$cid = CRM_Core_Session::singleton()->getLoggedInContactID();
//	dpm($cid);
	// Get their Postcode
	$result = civicrm_api3('Contact', 'get', [
	  'sequential' => 1,
	  'return' => ["postal_code"],
	  'id' => $cid,
	]);
	$postcode = $result['values'][0]['postal_code'];
//	dpm($postcode);
	// Set default value for HH Postcode
	$form['submitted']['civicrm_2_contact_1_fieldset_fieldset']['civicrm_2_contact_1_address_postal_code']['#default_value'] = $postcode;
  }
}

// ****************** Helper Routine ********************
// Extracts and formats the help text containing Membership types and prices
function lalg_get_price_data() {
//dpm('Get Price Data');
  // Check for cached copy
  $prices = &drupal_static(__FUNCTION__);
  if (!isset($prices)) {
    if ($cache = cache_get('lalg_membership_prices')) {
	$prices = $cache->data;
    }
    else {
		// Do the hard work, and populate $prices
		// Get all Active Membership Types
		$result = civicrm_api3('MembershipType', 'get', [
		  'sequential' => 1,
		  'is_active' => 1,
		]);
//dpm($result);

		// Build the Help Text
		$prices = '</br>Membership Prices: </br>'; 
		foreach ($result['values'] as $value) {
//			dpm($value);
			// Exclude OTM, now that it is discontinued
			if ( strpos($value['name'], 'Online') === false ) {
				$prices .= '&nbsp;&nbsp;&nbsp;' . $value['name'] . ' -- Â£';
				$prices .= number_format((float)$value['minimum_fee'], 2);
			}	
		}
      // Save back in the cache
      cache_set('lalg_membership_prices', $prices, 'cache', time() + 7200);		// Actually will be cleared when cron runs - max life two hours
    }
  }
  return $prices;
}


//********************************************************************
// Changes to Registration Form 
//********************************************************************
/**
 * Implements hook_form_alter().
 */
function lalg_dutils_form_user_register_form_alter(&$form, &$form_state, $form_id){
//dpm($form_id);
//dpm($form);

//************  Attach Javascript to forms for input validation. ************
	$path = drupal_get_path('module', 'lalg_dutils') . '/lalg_registerform.js';
	//dpm($path);
    $form['#attached']['js'][] = $path;
}

//********************************************************************
// Post Processing for Find Mailing Lists View 
//********************************************************************
/**
 * Implements hook_views_post_execute()
 */
function lalg_dutils_views_post_execute(&$view) {
// dpm($view);
	if ($view->name == 'find_mailing_lists') {
		foreach ($view->result as $key => $result) {
			$src = $result->civicrm_group_source;
			// Show just System Lists - Remove all results with OG Sync source.
			if (strpos($src, 'OG Sync') !== false) {
				unset($view->result[$key]);
			}
		}
	}
}

//********************************************************************
// Add permission for using STRIPE Test mode 
//********************************************************************
/**
 * Implements hook_permission()
 */
function lalg_dutils_permission() {
  return array(
    'LALG use Stripe Test mode' => array(
      'title' => t('LALG use Stripe Test mode'),
      'description' => t('Use the ?payment=test webform query string.'),
	  'restrict access' => TRUE,
    ),
  );
}
