<?php

//************************************************************
// Deals with Autocomplete of Pay Later for admin screens
//************************************************************
/**
 * Implements hook_action_info()
 * Creates an Action to Complete a Pay Later Contribution.
 */
function lalg_dutils_action_info() {
	//dpm('Hook Action Info called');
  return array(
    'lalg_dutils_complete_pay_later_contribution' => array(
      'type' => 'entity',
      'label' => t('Complete payment for a Pending Contribution'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Carries out the Complete Payment Action
 */
function lalg_dutils_complete_pay_later_contribution(&$entity, $context) {
	//dpm('VBO Action');
//	dpm($entity);
//	dpm($context);
	
	if ($context['entity_type'] != 'civicrm_contribution' ) return;
	if ($entity -> contribution_status != 'Pending' ) return;
	$cid = $entity -> contribution_id;
//	dpm($cid);

// Call the API to trigger the dependent actions - update Membership and send email 
//	dpm('VBO Completing the Contribution');
	$result = civicrm_api3('Contribution', 'completetransaction', [
		'id' => $cid,
		'total_amount' => $entity -> total_amount,
		'financial_type' => 2,									// Membership Dues
	]);
//	dpm($result);
	
// The system will now save the Drupal Entity which is mirroring the CiviCRM one, 
//  and thus overwrite changes made via the API.
//  So update the critical items 'by hand' before this happens.	
	$contribution_entity = entity_load_single('civicrm_contribution', $cid);
//	dpm($contribution_entity);
	
	$contribution_entity -> contribution_status_id = 1;				// Complete
	$contribution_entity -> contribution_status = 'Complete';		// Belt and Braces
	$contribution_entity -> payment_instrument_id = 6;				// Not Tracked
	$contribution_entity -> instrument_id = 6;						// Belt and Braces	
	$contribution_entity -> payment_instrument = 'Not Tracked';		// Belt and Braces
//	entity_save('civicrm_contribution', $contribution_entity);
}


//********************************************************************
// Custom Webform Validation Rules
//********************************************************************

/**
 * Implements hook_webform_validation_validators().
 */
function lalg_dutils_webform_validation_validators() {
  return array(
    'all_or_none' => array(
      'name' => "LALG All or None of Name/Email",
      'description' => "Checks all or none of the fields have content",
      'component_types' => array(
        'textfield', 'email',
      ),
    ),
	'lalg_email_dependencies' => array(
      'name' => "LALG Email Dependencies",
      'description' => "Checks dependencies requiring Email field. Select all related fields",
      'component_types' => array(
        'email', 'select',
      ),	 
	)
  );
}

/**
 * Implements hook_webform_validation_validate().
 */
function lalg_dutils_webform_validation_validate($validator_name, $items, $components, $rule) {
  if ($items) {
    switch ($validator_name) {
		
// ****************  All or None Validator  ***********************		
      case 'all_or_none':
// dpm($items);	  
        $errors = array();
        foreach ($items as $key => $val) {
			$items[$key] = (bool) strlen($items[$key]);
        }
		$number_completed = count(array_filter($items));
		if ($number_completed > 0 && $number_completed < count($items) ) {
			reset($items);
			$errors[key($items)] = 'You must complete all or none of the First/Last Name and Email';
		}
        return $errors;
        break;
		
// *********************  Email Dependencies Validator  **************************
	  case 'lalg_email_dependencies':
 //dpm($items);
 //dpm($components);		
        $errors = array();
		foreach ($items as $key => $val) {
			// Pick out the fields of interest
			switch ($components[$key]['form_key']) {
				case 'civicrm_1_contact_1_email_email':
					$email = $key;
				break;
				case 'civicrm_2_membership_1_membership_membership_type_id':
					$membId = $key;
				break;
				case 'civicrm_1_contact_1_cg4_custom_29':
					$sendDocs = $key;
				break;
			}
		}	
	
		// Set no error if Email field has some content.
		if ($components[$email]['value']) {return $errors;}
			
		// Email field empty - check dependencies
		// Plain Membership Required is selected
		if ($components[$membId]['value'] == 7) {
			$errors[$email] = 'Plain Membership requires an Email address';
			return $errors;
		}
				
		// Send documents by Email
		if ($components[$sendDocs]['value'] == 1) {
			$errors[$email] = 'Plain Membership requires an Email address';
			return $errors;
		}		
				
		// No errors		
        return $errors; 
		break;
    }
  }
}

//********************************************************************
// Changes to Webforms - in addition to the standard configuration stuff
//********************************************************************
/**
 * Implements hook_form_alter().
 */
function lalg_dutils_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
//dpm($form_id);

//************  Attach Javascript to Webforms for behaviour tweaks. ************
    $form['#attached']['js'][] = drupal_get_path('module', 'lalg_dutils') . '/lalg_webform.js';
  
//************  Add Membership Price Information  *****************
  if ($form['progressbar']['#page_num'] == '1') {	
  //dpm($form);
	// Find the Price Details
	$result = civicrm_api3('PriceSet', 'get', [
		'sequential' => 1,
		'name' => "Membership_Options_H",
	]);

	$result = civicrm_api3('PriceField', 'get', [
		'sequential' => 1,
		'price_set_id' => $result['values'][0]['id'],
	]);

	$result = civicrm_api3('PriceFieldValue', 'get', [
	  'sequential' => 1,
	  'price_field_id' => $result['values'][0]['id'],
	]);
//dpm($result);
	$values = $result['values'];
	foreach ($values as $key => $value) {
		if (stripos($value['name'], 'plain') !== FALSE) $plainKey = $key;
		if (stripos($value['name'], 'with_news') !== FALSE) $newsletterKey = $key;
	}

	// Add Prices to the Membership fieldset description field
	//dpm($form);
	$prices = 'Membership Prices: </br>' . $values[$plainKey]['label'] . ' -- £';
	$prices .= number_format((float)$values[$plainKey]['amount'], 2); 
	$prices .= '.&nbsp;&nbsp;&nbsp;&nbsp;' . $values[$newsletterKey]['label'] . ' -- £';
	$prices .= number_format((float)$values[$newsletterKey]['amount'], 2);
	if (isset($form['submitted']['membership_details']['#description'])) {
	  $form['submitted']['membership_details']['#description'] .= $prices;
	}
  }
}



